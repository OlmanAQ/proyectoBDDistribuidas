from ast import NodeVisitor
import tkinter as tk                # python 3
from tkinter import font as tkfont  # python 3
from tkinter import *

import psycopg2
import pyodbc 



class SampleApp(tk.Tk):

    def __init__(self, *args, **kwargs):
        tk.Tk.__init__(self, *args, **kwargs)

        self.title_font = tkfont.Font(
            family='Helvetica', size=18, weight="bold", slant="italic")

        # the container is where we'll stack a bunch of frames
        # on top of each other, then the one we want visible
        # will be raised above the others
        container = tk.Frame(self)
        container.pack(side="top", fill="both", expand=True)
        container.grid_rowconfigure(0, weight=1)
        container.grid_columnconfigure(0, weight=1)

        self.listanodos = [["Nodo 1", "localhost", "postgres", "1234", "5432"]]


        self.frames = {}
        for F in (StartPage, PageOne, PageTwo, TerceraPagina, PageNodos):
            page_name = F.__name__
            frame = F(parent=container, controller=self)
            self.frames[page_name] = frame

            # put all of the pages in the same location;
            # the one on the top of the stacking order
            # will be the one that is visible.
            frame.grid(row=0, column=0, sticky="nsew")

        self.show_frame("StartPage")


    def show_frame(self, page_name):
        '''Mostrar un frame para el nombre de página dado y centrar la ventana'''
        frame = self.frames[page_name]
        frame.tkraise()
    
    



class StartPage(tk.Frame):

    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        self.controller = controller

        btnNodo = tk.Button(self, text="Nodos", width=20, bg="light sky blue", font=("Arial Black", 10, "bold"),
                            command=lambda: controller.show_frame("PageNodos"))
        btnNodo.grid(column=3, row=2, padx=70, pady=50)
        btnNodo.configure(background="Gainsboro")

        btnNodo = tk.Button(self, text="Segmentacion Vertical", width=20, bg="light sky blue", font=("Arial Black", 10, "bold"),
                                command=lambda: controller.show_frame("PageTwo"))
        btnNodo.grid(column=3, row=3, padx=70, pady=50)
        btnNodo.configure(background="Gainsboro")

        btnNodo3 = tk.Button(self, text="Segmentacion Horizontal", width=20, bg="light sky blue", font=("Arial Black", 10, "bold"),
                                command=lambda: controller.show_frame("TerceraPagina"))
        btnNodo3.grid(column=3, row=4, padx=70, pady=50)
        btnNodo3.configure(background="Gainsboro")


"""Pagina en el que usuario digita los datos para la conexion con la base de datos postgresql
y lo guarda en una lista de datos
EJEMPLO:
    host = localhost
    database = prueba
    user = postgres
    password = 1234
    port = 5432
"""


"""
Pagina donde se muestra la lista de nodos creados
"""

class PageNodos(tk.Frame):

    #cada vez que se recarga
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        self.controller = controller

        label = tk.Label(self, text="Nodos", font=controller.title_font)
        label.pack(side="top", fill="x", pady=10)

        #enviar pagina de crear nodos y se cierra la pagina de nodos
        button = tk.Button(self, text="Crear Nodo", width=20, bg="light sky blue", font=("Arial Black", 10, "bold"),
                            command=lambda: controller.show_frame("PageOne"))
        button.pack()
        button.configure(background="Gainsboro")


        btnNodo = tk.Button(self, text="Salir", width=20, bg="light sky blue", font=("Arial Black", 10, "bold"),
                            command=lambda: controller.show_frame("StartPage"))
        btnNodo.pack()
        btnNodo.configure(background="Gainsboro")

        # se actualiza la lista de nodos cada vez que se ingresa a la pagina en el
        self.listbox = Listbox(self, width=50, height=10)
        self.listbox.pack()
        self.listbox.delete(0, END)
        for item in self.controller.listanodos:
            # se le da un nombtre a cada item de la lista
            self.listbox.insert(END, item)



        
        # boton para actualiza la lista de nodos cada vez que se ingresa a la pagina
        btnNodo = tk.Button(self, text="Actualizar", width=20, bg="light sky blue", font=("Arial Black", 10, "bold"),
                            command=lambda: self.actualizar())
        btnNodo.pack()
        btnNodo.configure(background="Gainsboro")
        
        
        # se crea un boton para eliminar un nodo de la lista
        btnNodo = tk.Button(self, text="Eliminar Nodo", width=20, bg="light sky blue", font=("Arial Black", 10, "bold"),
                            command=lambda: self.eliminarNodo())
        btnNodo.pack()
        btnNodo.configure(background="Gainsboro")

    def eliminarNodo(self):
        # se elimina el nodo seleccionado de la lista 
        self.listbox.delete(ANCHOR)
        self.controller.listanodos.clear()
        for item in self.listbox.get(0, END):
            # actualiza el nombre la tupla item
            aux= list(item)
            aux[0] = "Nodo "+str(len(self.controller.listanodos) + 1)
            item = tuple(aux)
            self.controller.listanodos.append(item)
        self.listbox.delete(0, END)
        self.actualizar()
            


    def actualizar(self):
        # se actualiza la lista de nodos cada vez que se ingresa a la pagina
        self.listbox.delete(0, END)
        for item in self.controller.listanodos:
            # se muestra el nombre del item Ejemplo: nodo 1
            self.listbox.insert(END, item)
        
 


class PageOne(tk.Frame):
    

    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        self.controller = controller
        label = tk.Label(self, text="Conectar nodo", font=controller.title_font)
        label.pack(side="top", fill="x", pady=10)

        button = tk.Button(self, text="Go to the start page",
                            command=lambda: controller.show_frame("PageNodos"))

        button.pack()

        label = tk.Label(self, text="Host", font=controller.title_font)
        label.pack(side="top", fill="x", pady=10)

        self.host = tk.Entry(self)
        self.host.pack()

        label = tk.Label(self, text="Database", font=controller.title_font)
        label.pack(side="top", fill="x", pady=10)

        self.database = tk.Entry(self)
        self.database.pack()

        label = tk.Label(self, text="User", font=controller.title_font)
        label.pack(side="top", fill="x", pady=10)

        self.user = tk.Entry(self)
        self.user.pack()

        label = tk.Label(self, text="Password", font=controller.title_font)
        label.pack(side="top", fill="x", pady=10)

        self.password = tk.Entry(self)
        self.password.pack()

        label = tk.Label(self, text="Port", font=controller.title_font)
        label.pack(side="top", fill="x", pady=10)

        self.port = tk.Entry(self)
        self.port.pack()

        # opcion para conexion postgresql o sqlserver
        self.var = IntVar()
        self.var.set(1)
        self.r1 = Radiobutton(self, text="PostgreSQL", variable=self.var, value=1)
        self.r1.pack()
        self.r2 = Radiobutton(self, text="SQL Server", variable=self.var, value=2)
        self.r2.pack()

        """Boton para guardar los datos de la conexion y le envia mensaje al usuario"""
        btnNodo = tk.Button(self, text="Guardar", width=20, bg="light sky blue", font=("Arial Black", 10, "bold"),
                            command=lambda: self.guardar())
        btnNodo.pack()
        btnNodo.configure(background="Gainsboro")



        


    def guardar(self):
        if self.var.get() == 1:
            try:
                conn = psycopg2.connect(host=self.host.get(), database=self.database.get(), user=self.user.get(),
                                        password=self.password.get(), port=self.port.get())
                # comprobar si existe
                nodo= ["Nodo "+str(len(self.controller.listanodos)+1), self.host.get(), self.database.get(), self.user.get(), self.password.get(), self.port.get(), "pgsql"]
                # comprobar si existe el nodo en listanodos
                if nodo not in self.controller.listanodos:
                    self.controller.listanodos.append(nodo)
                    tk.Message(self, text="Conexion exitosa PG", width=200).pack()
                else:
                    tk.Message(self, text="Conexion ya existe", width=200).pack()
                conn.close()
            except:
                tk.Message(self, text="Conexion fallida PG", width=200).pack()
        else:
            try:
                conn = pyodbc.connect('DRIVER={SQL Server};SERVER=' + self.host.get() + ';DATABASE=' + self.database.get() + ';UID=' + self.user.get() + ';PWD=' + self.password.get())
                
                nodo = ["Nodo " + str(len(self.controller.listanodos) + 1), self.host.get(), self.database.get(), self.user.get(), self.password.get(), self.port.get(), "sqlserver"]
                # comprobar si existe el nodo en listanodos
                conn.close()
            except:
                tk.Message(self, text="Conexion fallida SQL", width=200).pack()


    """ Crear conexion remota al nodo central en los secuandarios 
    Query:
    create extension postgres_fdw;

    --Conexión remota al nodo central 
    CREATE SERVER nodo_central_postgres_fdw
    FOREIGN DATA WRAPPER postgres_fdw
    OPTIONS (host 'localhost', dbname 'test', port '1001');

    CREATE USER MAPPING FOR postgres
    SERVER instancia1_postgres_fdw
    OPTIONS (user 'usr_remote', password '12345');
    """

    def crearConexion(self):
        # se crea la conexion remota al nodo central q
        conn = psycopg2.connect(host=self.host.get(), database=self.database.get(), user=self.user.get(),
                                password=self.password.get(), port=self.port.get())
        cur = conn.cursor()
        cur.execute("create extension postgres_fdw;")
        cur.execute("CREATE SERVER nodo_central_postgres_fdw FOREIGN DATA WRAPPER postgres_fdw OPTIONS (host 'localhost', dbname 'test', port '1001');")
        cur.execute("CREATE USER MAPPING FOR postgres SERVER nodo_central_postgres_fdw OPTIONS (user 'usr_remote', password '12345');")
        conn.commit()
        conn.close()






        








class PageTwo(tk.Frame):

    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        self.controller = controller
        label = tk.Label(self, text="Segmentacion Vertical", font=controller.title_font)
        label.pack(side="top", fill="x", pady=10)
        button = tk.Button(self, text="Go to the start page",
                           command=lambda: controller.show_frame("StartPage"))
        button.pack(side = "bottom")

        #crear un label que diga "Seleccione el nodo" 
        self.label = tk.Label(self, text="Seleccione el nodo", font = ("Arial Black",10,"bold"))
        self.label.pack(side="top", fill="x", pady=10)

        #crear una checklist con los datos de una lista cada vez que abra la ventana
        self.lista = self.controller.listanodos
        self.checklist = tk.Listbox(self, selectmode=tk.MULTIPLE)
        self.checklist.pack(side=tk.LEFT, fill=tk.BOTH, pady = 10, padx = 10)
        self.checklist.delete(0, tk.END)
        for item in self.lista:
            self.checklist.insert(tk.END, item)

        
        def aceptar():
            seleccionados = self.checklist.curselection()
            seleccionados = [self.lista[int(i)] for i in seleccionados]
            print(seleccionados)
            tk.messagebox.showinfo("Mensaje", "Los valores seleccionados son: " + str(seleccionados))

        #actualizar la lista de nodos
        def actualizar():
            self.lista = self.controller.listanodos
            self.checklist.delete(0, tk.END)
            for item in self.lista:
                self.checklist.insert(tk.END, item)
        
        #boton para actualizar la lista de nodos
        btnActualizar = tk.Button(self, text="Actualizar", width=20, bg="light sky blue", font=("Arial Black", 10, "bold"),
                            command=lambda: actualizar())
        btnActualizar.pack()
        btnActualizar.configure(background="Gainsboro")

        

        #actualizar la lista de nodos con un button
        self.btnActualizar = tk.Button(self, text="Actualizar", width=20, bg="light sky blue", font=("Arial Black", 10, "bold"),
                            command=lambda: self.actuactualizarPage())
        self.btnActualizar.pack(side = "bottom", pady = 10, padx = 10)
        self.btnActualizar.configure(background="Gainsboro")

        

        
        
        #actualizar la lista de nodos
        



        #crear un boton que actuliaze la lista de nodos
        



        # crear un boton que diga "Aceptar"
        button = tk.Button(self, text="Aceptar",
                           command= aceptar)
        button.pack(side = "bottom")

        #crear un label que diga "Crear table "
        self.label = tk.Label(self, text="Crear table ", font = ("Arial Black",10,"bold"))
        self.label.pack(side="top", fill="x", pady=10)
        #crear un radiobutton que diga  "Tabla local" y "Tabla global"
        self.radio = tk.IntVar()
        self.radio.set(1)
        self.r1 = tk.Radiobutton(self, text="Tabla local", variable=self.radio, value=1)
        self.r1.pack(side = "top", fill="x", pady=10)
        self.r2 = tk.Radiobutton(self, text="Tabla Remota", variable=self.radio, value=2)
        self.r2.pack(side = "top", fill="x", pady=10)

        #crear un label que diga "Nombre de la tabla"
        self.label = tk.Label(self, text="Nombre de la tabla", font = ("Arial Black",10,"bold"))
        self.label.pack(side="top", fill="x", pady=10)
        #crear un entry para ingresar el nombre de la tabla
        self.entry = tk.Entry(self)
        self.entry.pack(side = "top", fill="x", pady=10)

        #crear un label que diga "Ingrese los atributos"
        self.label = tk.Label(self, text="Ingrese las columnas", font = ("Arial Black",10,"bold"))     
        self.label.pack(side="top", fill="x", pady=10)
        
        #hacer un entry para ingresar la cantidad de columnas
        self.entry = tk.Entry(self)
        self.entry.pack(side = "top", fill="x", pady=10)

        #crear una funcion que cuando el buttonAgregarC es presionado, se creee y muestre una pagina nueva
        def agregarColumnas():
            print("agregar columnas")
            controller.show_frame("AgregarColumnas")

        #crear un button que diga "Agregar columnas"
        buttonAgregarC = tk.Button(self, text="Agregar columnas",
                           command= agregarColumnas)
        buttonAgregarC.pack(side = "bottom")

class TerceraPagina(tk.Frame):

    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        self.controller = controller
        label = tk.Label(self, text="This is page 3", font=controller.title_font)
        label.pack(side="top", fill="x", pady=10)
        button = tk.Button(self, text="Go to the start page",
                           command=lambda: controller.show_frame("StartPage"))
        button.pack()



if __name__ == "__main__":
    app = SampleApp()
    app.mainloop()
